% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seq_fragment.r
\name{seq_fragment}
\alias{seq_fragment}
\title{Break a sequence into random fragments}
\usage{
seq_fragment(x, avglen, circular = TRUE)
}
\arguments{
\item{x}{The original sequence as a character string (scalar).}

\item{avglen}{The expected average fragment length. This should
be a single number greater than zero.}

\item{circular}{Logical. If \code{TRUE}, the input sequence is assumed to
represent a circular molecule like, e.g., a fully intact plasmid and
the ends of \code{x} are joined before fragmentation starts.
If \code{FALSE}, a linear molecule with given front and tail is assumed.}
}
\value{
A vector of type character, each element of which is a random
  sub-section of the input character string passed in argument \code{x}.
}
\description{
The function simulates the shearing of, e.g., a DNA molecule. The molecule
is broken at random locations into a set of fragments.
}
\note{
The actual number of generated fragments is based on Poisson-distributed
random numbers derived from the provided value of \code{avglen}.
}
\examples{

# to create sample sequences

makeSeq <- function(len) {
  bases <- c("A","C","G","T")
  paste(bases[sample.int(length(bases), size=len, replace=TRUE)],
    collapse="")
}
# shear a single sequence

s <- makeSeq(50)
print(s)
frag <- seq_fragment(s, nchar(s)/3, FALSE)
print(frag)

# shear multiple sequences, applying identical settings for each

s <- c(s1=makeSeq(50), s2=makeSeq(30), s3=makeSeq(60))
print(s)
frag <- do.call(c, sapply(s, seq_fragment,
  avglen=mean(sapply(s, nchar))/3, simplify=FALSE))
print(frag)

# analyze fragment length distribution

s <- makeSeq(64000)   # original sequence (typical plasmid size)
avglen <- 1e4         # average fragment length desired
frag <- c()           # fragment 100 replicates
for (i in 1:100) {
  frag <- c(frag, seq_fragment(s, avglen=avglen, TRUE))
}
hist(log10(sapply(frag, nchar)), xaxt="n", breaks=20,
  main="Fragment length histogram", xlab="bp (log scaled)")
axis(side=1, at=1:6, labels=10^(1:6))
abline(h=avglen, col="red")
legend("topleft", bty="n", legend=c(
  paste0("Average length requested: ",avglen),
  paste0("Average length achieved: ",round(mean(sapply(frag, nchar))))
))
}
\author{
David Kneis \email{david.kneis@tu-dresden.de}
}
